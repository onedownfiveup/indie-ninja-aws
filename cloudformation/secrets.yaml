AWSTemplateFormatVersion: 2010-09-09

Parameters:
  StackName:
    Type: String

Resources:
  Secrets:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !Sub ${SecretsManager.Arn}
      SecretId: indie-ninja-api/secrets
  SecretsManager:
    Type: AWS::Lambda::Function
    DependsOn:
    - SecretsManagerLogGroup
    Properties:
      FunctionName: !Sub ${StackName}-secretsManager
      Description: !Sub ${StackName} Secrets Manager
      Handler: index.handler
      MemorySize: 128
      Runtime: python3.6
      Timeout: 300
      Role: !Sub ${SecretsManagerRole.Arn}
      Code:
        ZipFile: |
          import cfnresponse, json, sys, os
          import boto3
          client = boto3.client('secretsmanager')
          def handler(event, context):
            sys.stdout = sys.__stdout__
            try:
              print("Received event %s" % event)
              if event['RequestType'] == 'Delete':
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, event['PhysicalResourceId'])
                return
              secret = client.get_secret_value(
                SecretId=event['ResourceProperties']['SecretId'],
              )
              credentials = json.loads(secret['SecretString'])
              # Suppress logging output to ensure credential values are kept secure
              with open(os.devnull, "w") as devnull:
                sys.stdout = devnull
                cfnresponse.send(
                  event,
                  context,
                  cfnresponse.SUCCESS,
                  credentials, # This dictionary will be exposed to CloudFormation resources
                  secret['VersionId'], # Physical ID of the custom resource
                  noEcho=True
                )
            except Exception as e:
              print("A failure occurred with exception %s" % e)
              cfnresponse.send(event, context, cfnresponse.FAILED, {})
  SecretsManagerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Policies:
        - PolicyName: SecretsManagerPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Sid: GetSecrets
              Effect: Allow
              Action:
              - secretsmanager:GetSecretValue
              Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:indie-ninja-api/*
            - Sid: DecryptSecrets
              Effect: Allow
              Action:
              - kms:Decrypt
              Resource: !ImportValue secrets-key
            - Sid: ManageLambdaLogs
              Effect: Allow
              Action:
              - logs:CreateLogStream
              - logs:PutLogEvents
              Resource: !Sub ${SecretsManagerLogGroup.Arn}
  SecretsManagerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${StackName}-secretsManager
      RetentionInDays: 7

Outputs:
  Secrets:
    Value: !Ref Secrets

  DatabasePassword:
    Value: !GetAtt Secrets.DATABASE_PASSWORD

  GitHubToken:
    Value: !GetAtt Secrets.GITHUB_TOKEN
